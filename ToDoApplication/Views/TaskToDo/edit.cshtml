@model ToDoApplication.ViewModels.TaskDetailsViewModel
@{

    string GetCategoryEmoji(Category category)
    {
        switch (category)
        {
            case Category.DeepWork:
                return "\U0001F4DD";
            case Category.ShallowWork:
                return "\U0001F4DA";
            case Category.Chores:
                return "\U0001F9F9";
            case Category.Learning:
                return "\U0001F393";
            case Category.MindCare:
                return "\U0001F9D0";
            case Category.BodyCare:
                return "\U0001F9D6";
            case Category.People:
                return "\U0001F465";
            case Category.ShoppingList:
                return "\U0001F6D2";
            case Category.Other:
                return "\U0001F4AC";
            default:
                return "";
        }
    }
    var categories = Enum.GetValues(typeof(Category))
    .Cast<Category>()
    .Select(c => new SelectListItem
            {
                Value = c.ToString(),
                Text = $"{GetCategoryEmoji(c)} {c.ToString()}"
            });



    DateOnly inputDate = @Model.TaskToDo.Date;
    string outputDate = inputDate.ToString("yyyy-MM-dd");
}

<div class="AddTaskContainer">

    @using (Html.BeginForm("Edit", "TaskToDo", FormMethod.Post))
    {
        @Html.ValidationSummary()
        <div classs="row">
            <div class="col">
                @Html.HiddenFor(x => x.TaskToDo.TaskId)
                @Html.TextBoxFor(x => x.TaskToDo.Name, new { @class = "form-control", @placeholder="Name"})
            </div>
            <div class="col">
                @Html.TextBoxFor(x => x.TaskToDo.Description, new { @class = "form-control", @placeholder="Description"})
            </div>
            <div class="col">
                @Html.DropDownListFor(x => x.TaskToDo.Category, categories, "Select Category", new { @class = "form-control" })
            </div>
            <div class="col">
                @Html.TextBoxFor(x => x.TaskToDo.Date, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control"})
            </div><div class="col">
                @Html.TextBoxFor(x => x.TaskToDo.Time, new { @type = "time" , @class = "form-control" })
            </div>



            @if (Model.TaskToDo.shoppingLists != null)
            {
                <h3>Shopping Products</h3>
                for (int i = 0; i < Model.ShoppingProducts.Count; i++)
                {
                    <div class="form-group">
                        @Html.HiddenFor(x => x.ShoppingProducts[i].productId)
                        <div class="row">
                            <div class="col">
                                @Html.LabelFor(x => x.ShoppingProducts[i].name)
                                @Html.TextBoxFor(x => x.ShoppingProducts[i].name, new { @class = "form-control", @placeholder="Name", @style="width: 70%; display: inline-block" })
                            </div>
                            <div class="col">
                                @Html.LabelFor(x => x.ShoppingProducts[i].quantity)
                                @Html.TextBoxFor(x => x.ShoppingProducts[i].quantity, new { @class = "form-control", @type="number", @placeholder="Quantity", @style="width: 25%; display: inline-block; margin-left: 10px" })
                            </div>
                        </div>
                    </div>
                }
            }




            <div class="col">
                <button type="submit" class="btn btn-success">Edytuj taska</button>
            </div>
        </div>


    }

</div>
