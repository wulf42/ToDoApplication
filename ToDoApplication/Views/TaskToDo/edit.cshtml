@model ToDoApplication.ViewModels.TaskDetailsViewModel
@{

    string GetCategoryEmoji(Category category)
    {
        switch (category)
        {
            case Category.DeepWork:
                return "\U0001F4DD";
            case Category.ShallowWork:
                return "\U0001F4DA";
            case Category.Chores:
                return "\U0001F9F9";
            case Category.Learning:
                return "\U0001F393";
            case Category.MindCare:
                return "\U0001F9D0";
            case Category.BodyCare:
                return "\U0001F9D6";
            case Category.People:
                return "\U0001F465";
            case Category.ShoppingList:
                return "\U0001F6D2";
            case Category.Other:
                return "\U0001F4AC";
            default:
                return "";
        }
    }
    var categories = Enum.GetValues(typeof(Category))
    .Cast<Category>()
    .Select(c => new SelectListItem
            {
                Value = c.ToString(),
                Text = $"{GetCategoryEmoji(c)} {c.ToString()}"
            });



    DateOnly inputDate = @Model.TaskToDo.date;
    string outputDate = inputDate.ToString("yyyy-MM-dd");
}

<div class="ShoppingProductContainer">
    <div classs="row">
        @using (Html.BeginForm("Edit", "TaskToDo", FormMethod.Post))
        {
            @Html.ValidationSummary()
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Time</th>
                    </tr>
                </thead>
                <tbody>
                    @Html.HiddenFor(x => x.TaskToDo.taskId)
                    <tr>
                        <td>@Html.TextBoxFor(x => x.TaskToDo.name, new { @class = "form-control", @placeholder="Name"})</td>
                        <td>@Html.TextBoxFor(x => x.TaskToDo.description, new { @class = "form-control", @placeholder="Description"})</td>
                        <td>@Html.DropDownListFor(x => x.TaskToDo.category, categories, "Select Category", new { @class = "form-control" })</td>
                        <td>@Html.TextBoxFor(x => x.TaskToDo.date, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control"})</td>
                        <td>@Html.TextBoxFor(x => x.TaskToDo.time, new { @type = "time" , @class = "form-control" })</td>
                    </tr>
                </tbody>
            </table>

            @if (Model.TaskToDo.shoppingProducts != null)
            {
                <h4>Shopping Products</h4>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Quantity</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.ShoppingProducts.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.HiddenFor(x => x.ShoppingProducts[i].productId)
                                    @Html.TextBoxFor(x => x.ShoppingProducts[i].name, new { @class = "form-control", @placeholder="Name" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(x => x.ShoppingProducts[i].quantity, new { @class = "form-control", @type="number", @placeholder="Quantity" })
                                </td>
                                <td>
                                    @using (Html.BeginForm("Delete", "ShoppingProduct", FormMethod.Post))
                                    {
                                        @Html.Hidden("productId", Model.ShoppingProducts[i].productId)
                                        <button type="submit" class="btn btn-danger btn-sm"><i class="bi bi-trash"></i></button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            <div id="add-product-container"></div>
            <div class="col">
                <button type="submit" class="btn btn-success">Edytuj taska</button>
                @if (Model.TaskToDo.category == Category.ShoppingList)
                {
                    <button type="button" id="add-product-btn" class="btn btn-info">Add Shopping Product</button>

                }
            </div>
        }




    </div>
</div>
@section scripts {
    <script>
        $(function () {
            $('#add-product-btn').click(function () {
                var taskId = '@Model.TaskToDo.taskId';
                $.get('@Url.Action("Save", "ShoppingProduct")', { taskId: taskId }, function (data) {
                    $('#add-product-container').html(data);
                });
            });
        });
    </script>
}



